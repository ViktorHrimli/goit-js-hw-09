{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAE3BC,EAAW,EACXC,EAAU,KA0Bd,SAASC,EAAaC,EAAUC,IAUhC,SAAuBC,EAAUD,GAC/B,OAAO,IAAIE,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEpCH,EAAQ,CAAEI,SAAAN,EAAUD,UAEpBI,EAAO,CAAEG,SAAAN,EAAUD,cAfvBQ,CAAcT,EAAUC,GACrBS,MAAK,SAAAC,G,IAAGC,EAAQD,EAARH,SAAUK,EAAKF,EAALV,MACjBa,EAAAvB,GAASwB,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,UAEvEK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARH,SAAUK,EAAKF,EAALV,MAClBa,EAAAvB,GAASwB,OAAOI,QAAQ,sBAAqCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,UAczEpB,EAAKC,KAAK0B,iBAAiB,UA5C3B,SAAsBC,GACpBA,EAAMC,iBACNzB,EAAW,EACX,IAA8B0B,EAAAF,EAAMG,cAA9BvB,EAAwBsB,EAAxBtB,MAAOwB,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,OAEfC,EAAWC,OAAO3B,EAAM4B,OACxBC,EAAUF,OAAOH,EAAKI,OACtBE,EAAYH,OAAOF,EAAOG,OAE9BG,YAAW,WACTlC,EAAU6B,EACV5B,EAAaF,EAAU8B,GACvB,IAAMM,EAAWC,aAAY,WAC3BpC,GAAWgC,EAEPjC,IAAakC,EAAY,GAC3BI,cAAcF,GAGhBlC,EADAF,GAAY,EACWC,KACtBgC,KACFH,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// import\nconst refs = {\n  form: document.querySelector('.form'),\n};\nlet position = 1;\nlet totalMS = null;\n\nfunction getValueForm(event) {\n  event.preventDefault();\n  position = 1;\n  let { delay, step, amount } = event.currentTarget;\n\n  let dalayNum = Number(delay.value);\n  let stepNum = Number(step.value);\n  let amountNum = Number(amount.value);\n\n  setTimeout(() => {\n    totalMS = dalayNum;\n    alertPromise(position, dalayNum);\n    const timerInt = setInterval(() => {\n      totalMS += stepNum;\n\n      if (position === amountNum - 1) {\n        clearInterval(timerInt);\n      }\n      position += 1;\n      alertPromise(position, totalMS);\n    }, stepNum);\n  }, dalayNum);\n}\n\nfunction alertPromise(position, delay) {\n  createPromise(position, delay)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n// promis\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\nrefs.form.addEventListener('submit', getValueForm);\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$position","$ce04d3a99e08e73b$var$totalMS","$ce04d3a99e08e73b$var$alertPromise","position1","delay","position2","Promise","resolve","reject","Math","random","position","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure","addEventListener","event","preventDefault","_currentTarget","currentTarget","step","amount","dalayNum","Number","value","stepNum","amountNum","setTimeout","timerInt","setInterval","clearInterval"],"version":3,"file":"03-promises.9e8dcfcc.js.map"}